local lasttis = 0 
local JoinedGame = tick() 
_G.MeleeWait = ''
getgenv().SetContent = function(v1,delayticks)
    if not v1 then v1 = '' end 
    if tick()-lasttis > 0 then
        if not _G.CurrentTask then 
            _G.CurrentTask = ''
        end 
        if not _G.MeleeWait then 
            _G.MeleeWait = '' 
        end 
        local aSet1 = _G.CurrentTask
        if _G.MeleeTask and _G.MeleeTask ~= '' and _G.MeleeTask ~='None' then 
            aSet1 = _G.MeleeTask
        end
        if ContentSet then ContentSet(v1,tostring(aSet1),tostring(_G.MeleeWait)) else print('Not content set') end
    end 
    if delayticks then 
        lasttis = tick()+delayticks
    end
end  
getgenv().SetMeleeWait = function(v1Name,v1Value)
    _G.MeleeWait = " | Waiting "..tostring(v1Name).." hit "..tostring(v1Value).." mastery." 
end
_G.ServerData = {} 
function Join(v2) 
    v2 = tostring(v2) or "Pirates"
    v2 = string.find(v2,"Marine") and "Marines" or "Pirates"
    for i, v in pairs(
        getconnections(
            game:GetService("Players").LocalPlayer.PlayerGui.Main.ChooseTeam.Container[v2].Frame.TextButton.Activated
        )
    ) do
        v.Function()
    end
end
if not game.Players.LocalPlayer.Team then 
    repeat
        pcall(
            function()
                task.wait()
                if game:GetService("Players").LocalPlayer.PlayerGui:WaitForChild("Main"):FindFirstChild("ChooseTeam") then 
                    Join(_G.Team)
                end
            end
        )
    until game.Players.LocalPlayer.Team ~= nil 
end
print('Loaded Team')
local RunService= game:GetService("RunService")
function RemoveLevelTitle(v)
    return tostring(tostring(v):gsub(" %pLv. %d+%p", ""):gsub(" %pRaid Boss%p", ""):gsub(" %pBoss%p", ""))
end 
if game.Workspace:FindFirstChild("MobSpawns") then
    for i, v in pairs(game.Workspace:GetChildren()) do
        if v.Name == "MobSpawns" then
            v:Destroy()
        end
    end
end
_G.SavedConfig = type(_G.SavedConfig) == 'table' and _G.SavedConfig or {}
--loadstring(game:HttpGet('https://raw.githubusercontent.com/memaybeohub/NewPage/main/FastAttackLoading.lua'))()
loadstring(game:HttpGet('https://raw.githubusercontent.com/memaybeohub/NewPage/main/HopLoader.lua'))()
function GetDistance(target1, taget2)
    if not taget2 then
        pcall(function()
            taget2 = game.Players.LocalPlayer.Character.HumanoidRootPart
        end)
    end
    local bbos, bbos2 =
        pcall(
        function()
            a = target1.Position
            a2 = taget2.Position
        end
    )
    if bbos then
        return (a - a2).Magnitude
    end
end 

local MobSpawnsFolder = Instance.new("Folder")
MobSpawnsFolder.Parent = game.Workspace
MobSpawnsFolder.Name = "MobSpawns"
MobSpawnsFolder.ChildAdded:Connect(function(v)
    wait(1)
    v.Name = RemoveLevelTitle(v.Name)
end)
function getBlueGear()
    if game.workspace.Map:FindFirstChild("MysticIsland") then
        for i, v in pairs(game.workspace.Map.MysticIsland:GetChildren()) do
            if v:IsA("MeshPart") and v.MeshId == "rbxassetid://10153114969" then --and not v.CanCollide then
                return v
            end
        end
    end
end 
function getHighestPoint()
    if not game.workspace.Map:FindFirstChild("MysticIsland") then
        return nil
    end
    for i, v in pairs(game:GetService("Workspace").Map.MysticIsland:GetDescendants()) do
        if v:IsA("MeshPart") then
            if v.MeshId == "rbxassetid://6745037796" then
                return v
            end
        end
    end
end
local AllMobInGame = {}
for i, v in next, require(game:GetService("ReplicatedStorage").Quests) do
    for i1, v1 in next, v do
        for i2, v2 in next, v1.Task do
            if v2 > 1 then
                table.insert(AllMobInGame, i2)
            end
        end
    end
end
local MobOutFolder = {}
for i, v in pairs(game:GetService("Workspace")["_WorldOrigin"].EnemySpawns:GetChildren()) do
    v.Name = RemoveLevelTitle(v.Name)
    table.insert(MobOutFolder, v)
end
for i, v in pairs(getnilinstances()) do
    if table.find(AllMobInGame, RemoveLevelTitle(v.Name)) then
        table.insert(MobOutFolder, v)
    end
end
local l1 = {}
function ReCreateMobFolder()
    local MobNew
    l1 = {}
    for i,v in pairs(MobOutFolder) do 
        if v then
            pcall(function()
                if v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") then
                    MobNew = Instance.new("Part")
                    MobNew.CFrame = v.PrimaryPart.CFrame
                    MobNew.Name = v.Name
                    MobNew.Parent = game.Workspace.MobSpawns
                elseif v:IsA("Part") then
                    MobNew = v:Clone()
                    MobNew.Parent = game.Workspace.MobSpawns
                    MobNew.Transparency = 1
                end
                if not table.find(l1,v.Name) then 
                    table.insert(l1,tostring(v.Name))
                end 
            end)
        end
    end
end
task.spawn(ReCreateMobFolder)
local MobSpawnClone = {}
local function getMid(vName,gg)
    local total = 0
    local allplus 
    for i,v in pairs(gg) do
        if v.Name == vName then 
            if not allplus then 
                allplus = v.Position
            else
                allplus = allplus+v.Position 
            end
            total = total+1
        end
    end
    if allplus then return allplus/total end 
end
local lss = 0
for i,v in pairs(game.Workspace.MobSpawns:GetChildren()) do 
    if not MobSpawnClone[v.Name] then 
        MobSpawnClone[RemoveLevelTitle(v.Name)] = CFrame.new(getMid(v.Name,game.Workspace.MobSpawns:GetChildren()))
        lss = lss +1
    end 
end
_G.MobSpawnClone = MobSpawnClone
function GetMobSpawnList(a)
    local a = RemoveLevelTitle(a)
    k = {}  
    for i, v in pairs(game.Workspace.MobSpawns:GetChildren()) do
        if v.Name == a then
            table.insert(k, v)
        end
    end
    return k
end

local BlackListLocation = {}
function CheckNearestTeleporter(vcs)
    vcspos = vcs.Position
    min = math.huge
    min2 = math.huge
    local placeId = game.PlaceId
    if placeId == 2753915549 then
        OldWorld = true
    elseif placeId == 4442272183 then
        NewWorld = true
    elseif placeId == 7449423635 then
        ThreeWorld = true
    end
    local chooseis
    if ThreeWorld then
        TableLocations = {
            ["Caslte On The Sea"] = Vector3.new(-5058.77490234375, 314.5155029296875, -3155.88330078125),
            ["Hydra"] = Vector3.new(5756.83740234375, 610.4240112304688, -253.9253692626953),
            ["Mansion"] = Vector3.new(-12463.8740234375, 374.9144592285156, -7523.77392578125),
            ["Great Tree"] = Vector3.new(28282.5703125, 14896.8505859375, 105.1042709350586),
            ["Ngu1"] = Vector3.new(-11993.580078125, 334.7812805175781, -8844.1826171875),
            ["ngu2"] = Vector3.new(5314.58203125, 25.419387817382812, -125.94227600097656),
            ["Temple Of Time"] = Vector3.new(2957.833740234375, 2286.495361328125, -7217.05078125)
        }
    elseif NewWorld then
        TableLocations = {
            ["Mansion"] = Vector3.new(-288.46246337890625, 306.130615234375, 597.9988403320312),
            ["Flamingo"] = Vector3.new(2284.912109375, 15.152046203613281, 905.48291015625),
            ["122"] = Vector3.new(923.21252441406, 126.9760055542, 32852.83203125),
            ["3032"] = Vector3.new(-6508.5581054688, 89.034996032715, -132.83953857422)
        }
    elseif OldWorld then
        TableLocations = {
            ["1"] = Vector3.new(-7894.6201171875, 5545.49169921875, -380.2467346191406),
            ["2"] = Vector3.new(-4607.82275390625, 872.5422973632812, -1667.556884765625),
            ["3"] = Vector3.new(61163.8515625, 11.759522438049316, 1819.7841796875),
            ["4"] = Vector3.new(3876.280517578125, 35.10614013671875, -1939.3201904296875)
        }
    end
    local mmbb = {}
    for i2, v2 in pairs(TableLocations) do
        if not table.find(BlackListLocation, i2) then
            mmbb[i2] = v2
        end
    end
    local TableLocations = mmbb
    local TableLocations2 = {}
    for i, v in pairs(TableLocations) do
        if typeof(v) ~= "table" then
            TableLocations2[i] = (v - vcspos).Magnitude
        else
            TableLocations2[i] = (v["POS"] - vcspos).Magnitude
        end
    end
    for i, v in pairs(TableLocations2) do
        if v < min then
            min = v
            min2 = v
            choose = TableLocations[i]
            chooseis = i
        end
    end
    min3 = (vcspos - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
    if min2 + 100 <= min3 then
        return choose, chooseis
    end
end
function requestEntrance(vector3, fr)
    if not fr or fr ~= "Temple Of Time" and fr ~= "Dismension" then
        args = {
            "requestEntrance",
            vector3
        }
        game.ReplicatedStorage.Remotes.CommF_:InvokeServer(unpack(args))
        oldcframe = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
        char = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(oldcframe.X, oldcframe.Y + 50, oldcframe.Z)
        task.wait(0.5)
    else
        pcall(
            function()
                game.ReplicatedStorage.Remotes.CommF_:InvokeServer(
                    "requestEntrance",
                    Vector3.new(28282.5703125, 14896.8505859375, 105.1042709350586)
                )
                if GetDistance(CFrame.new(28282.5703125, 14896.8505859375, 105.1042709350586)) > 10 then
                    return
                end
                game.Players.LocalPlayer.Character:MoveTo(
                    CFrame.new(
                        28390.7812,
                        14895.8574,
                        106.534714,
                        0.0683786646,
                        1.44424162e-08,
                        -0.997659445,
                        7.52342522e-10,
                        1,
                        1.45278642e-08,
                        0.997659445,
                        -1.74397752e-09,
                        0.0683786646
                    ).Position
                )
                AllNPCS = getnilinstances()
                for i, v in pairs(game:GetService("Workspace").NPCs:GetChildren()) do
                    table.insert(AllNPCS, v)
                end
                for i, v in pairs(AllNPCS) do
                    if v.Name == "Mysterious Force" then
                        TempleMysteriousNPC1 = v
                    end
                    if v.Name == "Mysterious Force3" then
                        TempleMysteriousNPC2 = v
                    end
                end
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
                    TempleMysteriousNPC2.HumanoidRootPart.CFrame
                wait(0.3)
                if
                    (TempleMysteriousNPC2.HumanoidRootPart.Position -
                        game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude < 15
                 then
                    game.ReplicatedStorage.Remotes.CommF_:InvokeServer("RaceV4Progress", "TeleportBack")
                end
                wait(0.75)
            end
        )
    end
end
function AntiLowHealth(NewY)
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
        CFrame.new(
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.X,
        NewY,
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.Z
    )
    wait()
end
function GetMidPoint(MobName, b2)
    if MobName == "Ship Officer [Lv. 1325]" then
        return b2.CFrame
    end
    if 1 > 1 then
        return b2.CFrame
    end
    local totalpos
    allid = 0
    for i, v in pairs(game.workspace.Enemies:GetChildren()) do
        if
            v.Name == MobName and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 and v:FindFirstChild("HumanoidRootPart") and
                (b2 and GetDistance(v.HumanoidRootPart, b2) <= 475)
         then
            if not totalpos then
                totalpos = v.HumanoidRootPart.Position
            elseif totalpos then
                totalpos = totalpos + v.HumanoidRootPart.Position
            end
            allid = allid + 1
        end
    end
    if totalpos then
        return totalpos / allid
    end
end 
function TweenObject(TweenCFrame,obj,ts)
    if not ts then ts = 350 end
    local tween_s = game:service "TweenService"
    local info =
        TweenInfo.new(
        (TweenCFrame.Position -
            obj.Position).Magnitude /
            ts,
        Enum.EasingStyle.Linear
    )
    _G.TweenObject =
        tween_s:Create(
            obj,
        info,
        {CFrame = TweenCFrame}
    )
    _G.TweenObject:Play() 
end
function IsPlayerAlive(player)
    if not player then
        player = game.Players.LocalPlayer
    end

    -- Kiểm tra xem đối tượng player có tồn tại và là một người chơi hợp lệ không
    if not player or not player:IsA("Player") then
        return false -- Trả về false nếu không phải là người chơi
    end

    -- Kiểm tra trạng thái nhân vật của người chơi
    local character = player.Character or player:FindFirstChild('Character')
    if not character then
        return false -- Trả về false nếu không có nhân vật
    end

    -- Kiểm tra thanh máu của nhân vật (Humanoid)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid or humanoid.Health <= 0 then
        return false -- Trả về false nếu không có Humanoid hoặc máu bằng 0
    end

    -- Nếu tất cả các điều kiện trên đều thỏa mãn, người chơi còn sống
    return true 
end
function CheckPlayerAlive()
    local a2,b2 = pcall(function() return game:GetService("Players").LocalPlayer.Character.Humanoid.Health > 0 end)
    task.wait()
    if a2 then return b2 end 
end   
local FruitStocks = {}
for i,v in pairs(game.ReplicatedStorage.Remotes.CommF_:InvokeServer(
    "GetFruits",
    game:GetService("Players").LocalPlayer.PlayerGui.Main.FruitShop:GetAttribute("Shop2")
)) do 
    if v.OnSale then 
        table.insert(FruitStocks,v.Name)
    end
end
function SnipeFruit(fruitsSnipes)
    if _G.ServerData['PlayerData'].DevilFruit == '' then 
        for i = #fruitsSnipes,1,1 do 
            local f = fruitsSnipes[i]
            if FruitStocks[f] then 
                game.ReplicatedStorage.Remotes.CommF_:InvokeServer("PurchaseRawFruit", f, game:GetService("Players").LocalPlayer.PlayerGui.Main.FruitShop:GetAttribute("Shop2"))
                return 
            end
        end  
    end
end   
function sortSwordsByRarity(swords)
    table.sort(swords, function(a, b)
        return a.Rarity > b.Rarity
    end) 
    return swords[1]
end

function getNextSwordToFarm()
    local Swords = {}
    for _, itemData in pairs(_G.ServerData["Inventory Items"]) do 
        if itemData.Type == 'Sword' and itemData.Mastery < itemData.MasteryRequirements.X then 
            table.insert(Swords, itemData)  -- Chèn đúng vào bảng Swords
        end 
    end
    if #Swords > 0 then 
        local NNN = sortSwordsByRarity(Swords) 
        return NNN,NNN.MasteryRequirements.X
    end
    Swords = {}
    for _, itemData in pairs(game:GetService("ReplicatedStorage").Remotes["CommF_"]:InvokeServer("getInventory")) do 
        if itemData.Type == 'Sword' and itemData.Mastery < 600 then 
            table.insert(Swords, itemData)  -- Chèn đúng vào bảng Swords
        end 
    end
    if #Swords > 0 then 
        local NNN = sortSwordsByRarity(Swords) 
        return NNN,600
    end
    return nil,0
end  

function checkFruit1MWS()
    for i,v in pairs(game.workspace:GetChildren()) do 
        if v.Name:find('Fruit') and getPriceFruit(ReturnFruitNameWithId(v)) >= 1000000 and getPriceFruit(ReturnFruitNameWithId(v)) < 2500000 then 
            return v 
        end 
    end
end
function checkFruit1M(in5)
    local function fruitsea3bp()
        local n3
        for i,v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do 
            if v.Name:find('Fruit') and getPriceFruit(ReturnFruitNameWithId(v)) >= 1000000 and getPriceFruit(ReturnFruitNameWithId(v)) < 2500000 then 
                n3 = v 
            end 
        end 
        for i,v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do 
            if v.Name:find('Fruit') and getPriceFruit(ReturnFruitNameWithId(v)) >= 1000000 and getPriceFruit(ReturnFruitNameWithId(v)) < 2500000 then 
                n3 = v 
            end 
        end 
        return n3 
    end 
    if fruitsea3bp() then return fruitsea3bp() end
    if in5 then  
        local FOUNDDF 
        local MaxValue = math.huge 
        for i,v in pairs(_G.ServerData["Inventory Items"]) do 
            if v.Value and (v.Value >= 1000000 and v.Value < 2500000 ) and v.Value < MaxValue then   
                MaxValue = v.Value 
                FOUNDDF = v.Name
            end
        end 
        if FOUNDDF then 
            game.ReplicatedStorage.Remotes.CommF_:InvokeServer("LoadFruit", FOUNDDF) 
            wait(.5)
            if fruitsea3bp() then return fruitsea3bp() end
        end
    end 
end
function checkFruittoEat(fruitsSnipes,includedInventory)
    for i,v in pairs(fruitsSnipes) do 
        for index,Inst in _G.ServerData['PlayerBackpack'] do 
            if index:find('Fruit') and Inst then 
                if Inst:GetAttribute("OriginalName") and tostring(Inst:GetAttribute("OriginalName")) == v then 
                    return Inst 
                end
            end
        end
    end 
    if includedInventory then 
        for i,v in pairs(fruitsSnipes) do 
            if _G.ServerData["Inventory Items"][v] then 
                return true
            end
        end
    end
end 
function eatFruit(fruitsSnipes,includedInventory) 
    function l4432()
        for i,v in pairs(fruitsSnipes) do
            for Ind,Inst in _G.ServerData['PlayerBackpack'] do 
                if Ind:find('Fruit') and Inst then 
                    if Inst:GetAttribute("OriginalName") and tostring(Inst:GetAttribute("OriginalName")) == v then 
                        task.spawn(function()
                            Tweento(CFrame.new(game.Players.LocalPlayer.Character.PrimaryPart.CFrame.X,game.Players.LocalPlayer.Character.PrimaryPart.CFrame.Y +2000,game.Players.LocalPlayer.Character.PrimaryPart.CFrame.Z))
                        end)
                        repeat 
                            task.wait()
                            EquipWeaponName(Ind)
                        until game.Players.LocalPlayer.Character:FindFirstChild("EatRemote")
                        print('Eating Fruit')
                        game.Players.LocalPlayer.Character:FindFirstChild("EatRemote", true):InvokeServer()
                        _G.CurrentTask = ''
                        print('Changed Task.')
                    end
                end
            end
        end 
    end
    l4432()
    if includedInventory then 
        for i,v in pairs(fruitsSnipes) do 
            if _G.ServerData["Inventory Items"][v] then 
                game.ReplicatedStorage.Remotes.CommF_:InvokeServer("LoadFruit", v) 
                l4432()
            end
        end
    end
end 
function Storef(v) 
    if _G.CurrentTask ~= 'Eat Fruit' and _G.CurrentTask ~= 'Auto Sea 3' then 
        return game.ReplicatedStorage.Remotes.CommF_:InvokeServer(
            "StoreFruit",
            tostring(v:GetAttribute("OriginalName")),
            v
        )
    end
end 
function NearestMob(distanc)
    for i,v in game.workspace.Enemies:GetChildren() do 
        local vhum = v:FindFirstChildOfClass('Humanoid') or v:WaitForChild('Humanoid')
        if vhum and vhum.Parent and vhum.ClassName == 'Humanoid' and vhum.Health >= 0 and vhum.Parent.PrimaryPart and (vhum.Parent.PrimaryPart.Position-game.Players.LocalPlayer.Character.PrimaryPart.Position).Magnitude <= d
